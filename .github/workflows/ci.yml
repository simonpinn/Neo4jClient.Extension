name: CI

on:
  push:
    branches: [ '**' ]
    branches-ignore: [ master, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ master, develop, 'release/**', 'hotfix/**' ]

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:5.24-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_server_memory_heap_initial__size: 512m
          NEO4J_server_memory_heap_max__size: 2G
          NEO4J_server_memory_pagecache_size: 1G
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.1.0
      with:
        versionSpec: '6.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1
      with:
        useConfigFile: true

    - name: Display GitVersion outputs
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"

    - name: Restore dependencies
      run: dotnet restore Neo4jClient.Extension.sln

    - name: Build
      run: dotnet build Neo4jClient.Extension.sln --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.assemblySemVer }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} /p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}

    - name: Run Unit Tests
      run: dotnet test test/Neo4jClient.Extension.UnitTest/ --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=unit-test-results.trx"

    - name: Wait for Neo4j
      run: |
        echo "Waiting for Neo4j to be ready..."
        timeout 60 bash -c 'until docker exec ${{ job.services.neo4j.id }} cypher-shell -u neo4j -p testpassword "RETURN 1" 2>/dev/null; do sleep 2; done' || echo "Neo4j health check via docker exec failed, continuing..."

    - name: Run Integration Tests
      run: dotnet test test/Neo4jClient.Extension.IntegrationTest/ --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=integration-test-results.trx"
      env:
        Neo4jConnectionString: bolt://localhost:7687
        Neo4jUsername: neo4j
        Neo4jPassword: testpassword

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: '**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true
